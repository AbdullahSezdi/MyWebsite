{
  "slug": "makine-ogrenimi-algoritmalari",
  "title": "Makine Ã–ÄŸrenimi Metrik SeÃ§im Rehberi",
  "summary": "Makine Ã¶ÄŸrenimi projelerinde hangi metriÄŸi kullanmalÄ±sÄ±nÄ±z? Bu rehberde, en yaygÄ±n metrikleri ve ne zaman kullanÄ±lmalarÄ± gerektiÄŸini Ã¶ÄŸreneceksiniz.",
  "content": "# Makine Ã–ÄŸrenimi Metrik SeÃ§im Rehberi\n\n## 1. GiriÅŸ\n\nBir makine Ã¶ÄŸrenimi modelinin baÅŸarÄ±sÄ±nÄ± nasÄ±l Ã¶lÃ§ersiniz? Bu sorunun cevabÄ±, projenizin hedeflerine ve veri tipinize gÃ¶re deÄŸiÅŸir. Bu rehberde:\n\n- Hangi metriÄŸi ne zaman kullanmalÄ±sÄ±nÄ±z?\n- Metrikler arasÄ±ndaki farklar neler?\n- YaygÄ±n hatalar neler?\n\nsorularÄ±nÄ±n cevaplarÄ±nÄ± bulacaksÄ±nÄ±z.\n\n## 2. En Ã‡ok KullanÄ±lan Metrikler\n\n### MAPE (Mean Absolute Percentage Error)\n\n**Ne zaman kullanÄ±lÄ±r?**\n- âœ“ FarklÄ± Ã¶lÃ§ekteki verileri karÅŸÄ±laÅŸtÄ±rÄ±rken\n- âœ“ SatÄ±ÅŸ tahminlerinde\n- âœ“ Ä°ÅŸ dÃ¼nyasÄ±na sonuÃ§larÄ± aÃ§Ä±klarken\n\n**AvantajlarÄ±**\n- âœ“ YÃ¼zde olduÄŸu iÃ§in anlaÅŸÄ±lmasÄ± kolay\n- âœ“ FarklÄ± modelleri karÅŸÄ±laÅŸtÄ±rmak mÃ¼mkÃ¼n\n- âœ“ Ä°ÅŸ dÃ¼nyasÄ±nda yaygÄ±n kullanÄ±m\n\n**DezavantajlarÄ±**\n- Ã— GerÃ§ek deÄŸer 0'a yakÄ±nsa sorun Ã§Ä±kar\n- Ã— BÃ¼yÃ¼k hatalar yeterince cezalandÄ±rÄ±lmaz\n\n### RMSE (Root Mean Square Error)\n\n**Ne zaman kullanÄ±lÄ±r?**\n- âœ“ BÃ¼yÃ¼k hatalarÄ± cezalandÄ±rmak istediÄŸinizde\n- âœ“ Hassas tahminler gerektiÄŸinde\n- âœ“ Regresyon problemlerinde\n\n**AvantajlarÄ±**\n- âœ“ BÃ¼yÃ¼k hatalarÄ± daha Ã§ok cezalandÄ±rÄ±r\n- âœ“ Gradyan hesaplamalarÄ± iÃ§in uygundur\n- âœ“ Ä°statistiksel yorumlama kolaylÄ±ÄŸÄ±\n\n**DezavantajlarÄ±**\n- Ã— AykÄ±rÄ± deÄŸerlere karÅŸÄ± hassas\n- Ã— YorumlamasÄ± daha zor\n\n### MAE (Mean Absolute Error)\n\n**Ne zaman kullanÄ±lÄ±r?**\n- âœ“ AykÄ±rÄ± deÄŸerler varsa\n- âœ“ Medyan tahmini yaparken\n- âœ“ Basit ve anlaÅŸÄ±lÄ±r metrik gerektiÄŸinde\n\n**AvantajlarÄ±**\n- âœ“ AykÄ±rÄ± deÄŸerlerden etkilenmez\n- âœ“ YorumlamasÄ± kolay\n- âœ“ Orijinal birimde sonuÃ§ verir\n\n**DezavantajlarÄ±**\n- Ã— BÃ¼yÃ¼k hatalar yeterince Ã¶nemsenmez\n- Ã— Gradyan hesaplamalarÄ± zor\n\n## 3. Metrik SeÃ§im Rehberi\n\n### Problem Tipine GÃ¶re\n\n**Regresyon Problemleri**\n- Fiyat tahmini â†’ RMSE\n- SatÄ±ÅŸ tahmini â†’ MAPE\n- SÄ±caklÄ±k tahmini â†’ MAE\n\n**SÄ±nÄ±flandÄ±rma Problemleri**\n- Spam tespiti â†’ Accuracy\n- HastalÄ±k teÅŸhisi â†’ F1-Score\n- Risk analizi â†’ AUC-ROC\n\n### Veri Ã–zelliklerine GÃ¶re\n\n**AykÄ±rÄ± DeÄŸer Varsa**\n- âœ“ MAE kullanÄ±n\n- Ã— RMSE kullanmayÄ±n\n\n**Ã–lÃ§ek FarkÄ± Varsa**\n- âœ“ MAPE kullanÄ±n\n- Ã— MAE kullanmayÄ±n\n\n**Hassasiyet Ã–nemliyse**\n- âœ“ RMSE kullanÄ±n\n- Ã— MAE kullanmayÄ±n\n\n## 4. Pratik Ä°puÃ§larÄ±\n\n### Ã‡oklu Metrik KullanÄ±mÄ±\n\n```python\n# Tek metrik yerine birden fazla metrik kullanÄ±n\ndef model_degerlendirme(gercek, tahmin):\n    return {\n        'RMSE': np.sqrt(mean_squared_error(gercek, tahmin)),\n        'MAE': mean_absolute_error(gercek, tahmin),\n        'MAPE': mean_absolute_percentage_error(gercek, tahmin)\n    }\n```\n\n### DoÄŸrulama Stratejisi\n\n```python\n# Cross-validation ile daha gÃ¼venilir sonuÃ§lar alÄ±n\nfrom sklearn.model_selection import cross_val_score\n\nsonuclar = cross_val_score(model, X, y, \n                          scoring='neg_root_mean_squared_error',\n                          cv=5)\n```\n\n## 5. SÄ±k YapÄ±lan Hatalar\n\n### 1. Tek MetriÄŸe GÃ¼venmek\n**YanlÄ±ÅŸ:** Sadece accuracy kullanmak\n**DoÄŸru:** Accuracy + F1-Score + AUC-ROC\n\n### 2. Veri DaÄŸÄ±lÄ±mÄ±nÄ± Unutmak\n**YanlÄ±ÅŸ:** AykÄ±rÄ± deÄŸerleri gÃ¶rmezden gelmek\n**DoÄŸru:** Veri analizi yapÄ±p uygun metrik seÃ§mek\n\n### 3. Ä°ÅŸ Hedeflerini GÃ¶z ArdÄ± Etmek\n**YanlÄ±ÅŸ:** Sadece teknik metriklere odaklanmak\n**DoÄŸru:** Ä°ÅŸ birimlerinin ihtiyaÃ§larÄ±nÄ± da dÃ¼ÅŸÃ¼nmek\n\n## 6. HÄ±zlÄ± BaÅŸvuru Tablosu\n\n| Durum | Ã–nerilen Metrik | Neden? |\n|-------|-----------------|--------|\n| AykÄ±rÄ± deÄŸer var | MAE | DayanÄ±klÄ± |\n| Hassasiyet Ã¶nemli | RMSE | HatalarÄ± cezalandÄ±rÄ±r |\n| KarÅŸÄ±laÅŸtÄ±rma yapÄ±lacak | MAPE | Ã–lÃ§ekten baÄŸÄ±msÄ±z |\n| Risk analizi | AUC-ROC | EÅŸik deÄŸerinden baÄŸÄ±msÄ±z |\n| Dengesiz veri | F1-Score | Precision ve recall dengesi |\n\n## 7. Ã–zet\n\nâœ… **DoÄŸru Metrik SeÃ§imi Ä°Ã§in:**\n1. Problem tipinizi belirleyin\n2. Veri Ã¶zelliklerini analiz edin\n3. Ä°ÅŸ hedeflerini gÃ¶z Ã¶nÃ¼nde bulundurun\n4. Birden fazla metrik kullanÄ±n\n5. DÃ¼zenli validasyon yapÄ±n\n\n> ğŸ’¡ **Pro Tip:** Her zaman en az 2-3 farklÄ± metrik kullanÄ±n ve sonuÃ§larÄ± bir arada deÄŸerlendirin.\n\n## 8. FaydalÄ± Kaynaklar\n\nğŸ“š **DetaylÄ± Bilgi Ä°Ã§in:**\n- [Scikit-learn Metrics Guide](https://scikit-learn.org/stable/modules/model_evaluation.html)\n- [Model Evaluation Best Practices](https://www.tensorflow.org/tutorials/keras/classification)\n- [Time Series Metrics](https://otexts.com/fpp3/accuracy.html)",
  "category": "Makine Ã–ÄŸrenimi",
  "readTime": "10",
  "publishDate": "2024-02-20",
  "image": "/images/blog/machine-learning.svg",
  "tags": ["Makine Ã–ÄŸrenimi", "Metrikler", "Model DeÄŸerlendirme", "Python"]
} 