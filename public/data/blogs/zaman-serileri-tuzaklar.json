{
  "slug": "zaman-serileri-tuzaklar",
  "title": "Zaman Serisi Analizinde Sık Yapılan Hatalar",
  "summary": "Zaman serisi projelerinde başarılı olmak için kaçınmanız gereken yaygın tuzakları ve çözüm önerilerini bu rehberde bulabilirsiniz.",
  "content": "# Zaman Serisi Analizinde Sık Yapılan Hatalar\n\n## 1. Giriş\n\nZaman serisi analizi, veri biliminin en zorlu alanlarından biridir. Bu rehberde:\n\n- En yaygın hataları\n- Bu hataların neden önemli olduğunu\n- Nasıl kaçınabileceğinizi\n\nöğreneceksiniz.\n\n## 2. Temel Kavramlar\n\n### Zaman Serisi Nedir?\n\n**Tanım:**\n- Zamana bağlı olarak toplanan veri dizisi\n- Örnek: Günlük satışlar, saatlik sıcaklık, aylık enflasyon\n\n**Önemli Özellikler:**\n- ✓ Zaman bağımlılığı\n- ✓ Mevsimsellik\n- ✓ Trend\n- ✓ Durağanlık\n\n## 3. Yaygın Tuzaklar ve Çözümleri\n\n### 1. Veri Sızıntısı (Data Leakage)\n\n**Hata:**\n- × Gelecek verilerini eğitimde kullanmak\n- × Yanlış zaman indeksi kullanmak\n- × Cross-validation'ı rastgele yapmak\n\n**Doğru Yaklaşım:**\n- ✓ Zaman bazlı bölme kullanın\n- ✓ Gelecek verilerini test setinde tutun\n- ✓ Time series cross-validation kullanın\n\n```python\n# Yanlış Yaklaşım ❌\nfrom sklearn.model_selection import train_test_split\nX_train, X_test = train_test_split(df)\n\n# Doğru Yaklaşım ✓\ntrain_end = '2023-12-31'\nX_train = df[df.index <= train_end]\nX_test = df[df.index > train_end]\n```\n\n### 2. Durağanlık Kontrolü\n\n**Hata:**\n- × Durağanlık testini atlama\n- × Yanlış dönüşüm uygulama\n- × Mevsimselliği göz ardı etme\n\n**Doğru Yaklaşım:**\n- ✓ ADF testi yapın\n- ✓ Gerekirse fark alma\n- ✓ Mevsimsel ayrıştırma kullanın\n\n```python\n# Durağanlık Testi\nfrom statsmodels.tsa.stattools import adfuller\n\ndef check_stationarity(series):\n    result = adfuller(series)\n    print(f'ADF İstatistiği: {result[0]}')\n    print(f'p-değeri: {result[1]}')\n```\n\n### 3. Eksik Veri Yönetimi\n\n**Hata:**\n- × Basit doldurma yöntemleri kullanma\n- × Zaman bağımlılığını unutma\n- × Mevsimselliği göz ardı etme\n\n**Doğru Yaklaşım:**\n- ✓ İnterpolasyon kullanın\n- ✓ Zaman bazlı doldurma yapın\n- ✓ Mevsimsel etkileri göz önünde bulundurun\n\n```python\n# Zaman Bazlı Doldurma\ndf = df.resample('D').interpolate(method='time')\n```\n\n### 4. Trend ve Mevsimsellik\n\n**Hata:**\n- × Ham veriyi direkt kullanma\n- × Tek bir bileşene odaklanma\n- × Aşırı basitleştirme\n\n**Doğru Yaklaşım:**\n- ✓ Ayrıştırma yapın\n- ✓ Tüm bileşenleri analiz edin\n- ✓ Uygun dönüşümleri uygulayın\n\n```python\n# Mevsimsel Ayrıştırma\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\nresult = seasonal_decompose(df,\n                          period=12,  # Aylık veri için\n                          model='multiplicative')\n```\n\n## 4. Model Seçimi ve Değerlendirme\n\n### Doğru Model Seçimi\n\n| Durum | Önerilen Model | Neden? |\n|-------|----------------|--------|\n| Güçlü mevsimsellik | SARIMA | Mevsimsel bileşen |\n| Çoklu değişken | VAR | Değişkenler arası ilişki |\n| Doğrusal olmayan | Prophet | Esnek modelleme |\n| Uzun vadeli bağımlılık | LSTM | Karmaşık paternler |\n\n### Değerlendirme Metrikleri\n\n**Zaman Serisi için Özel Metrikler:**\n- ✓ MAPE: Yüzdesel hata\n- ✓ RMSE: Büyük hataları cezalandırma\n- ✓ MAE: Aykırı değerlere dayanıklı\n\n## 5. Pratik İpuçları\n\n### Veri Hazırlama\n\n```python\n# Temel Veri Hazırlama Adımları\ndef prepare_time_series(df):\n    # 1. Zaman indeksi kontrolü\n    df.index = pd.to_datetime(df.index)\n    \n    # 2. Eksik değer kontrolü\n    df = df.resample('D').interpolate(method='time')\n    \n    # 3. Durağanlık kontrolü ve dönüşüm\n    if not is_stationary(df):\n        df = df.diff().dropna()\n    \n    return df\n```\n\n### Model Validasyonu\n\n```python\n# Time Series Cross Validation\nfrom sklearn.model_selection import TimeSeriesSplit\n\ntscv = TimeSeriesSplit(n_splits=5)\nfor train_idx, test_idx in tscv.split(X):\n    # Model eğitimi ve değerlendirme\n```\n\n## 6. Özet\n\n✅ **Başarılı Bir Zaman Serisi Analizi İçin:**\n1. Veri sızıntısını engelleyin\n2. Durağanlığı kontrol edin\n3. Eksik verileri doğru yönetin\n4. Trend ve mevsimselliği analiz edin\n5. Doğru model ve metrikleri seçin\n\n> 💡 **Pro Tip:** Her zaman görselleştirme yapın ve verinin yapısını iyi anlayın. Zaman serisi analizinde görsel analiz çok önemlidir.\n\n## 7. Faydalı Kaynaklar\n\n📚 **Detaylı Bilgi İçin:**\n- [Time Series Analysis in Python](https://otexts.com/fpp3/)\n- [Statsmodels Documentation](https://www.statsmodels.org/stable/tsa.html)\n- [Prophet Documentation](https://facebook.github.io/prophet/)",
  "category": "Veri Bilimi",
  "readTime": "12",
  "publishDate": "2024-02-15",
  "image": "/images/blog/time-series.svg",
  "tags": ["Zaman Serileri", "Veri Bilimi", "Python", "Modelleme"]
} 